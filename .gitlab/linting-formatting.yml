linting-and-formatting:
  stage: lint
  image:
    name: oxsecurity/megalinter-c_cpp:v8.1.0
    entrypoint: [""]
  interruptible: true
  variables:
    DEFAULT_WORKSPACE: $CI_PROJECT_DIR
    DEFAULT_BRANCH: $CI_DEFAULT_BRANCH
    MEGALINTER_CONFIG: .mega-linter.yml
    APPLY_FIXES: all
    VALIDATE_ALL_CODEBASE: true
    REPORT_OUTPUT_FOLDER: "megalinter-reports"
    GITLAB_COMMENT_REPORTER: "true"
    SARIF_REPORTER: "true"
    CONVERTED_OUTPUT_FOLDER: "converted.report"
    SARIF_CODECLIMATE_VERSION: "2.1.2"
    GITLAB_ACCESS_TOKEN_MEGALINTER: ${GITLAB_ACCESS_TOKEN_MEGALINTER}
    REVIEWDOG_GITHUB_API_TOKEN: ${REVIEWDOG_GITLAB_API_TOKEN}
  before_script:
    - |
      curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh| sh -s -- -b /usr/local/bin/

  script:
    - |
      if /entrypoint.sh true; then
        echo -e "\e[32mMegaLinter haven't found any issue!"
      else
        echo -e "\e[31mMegaLinter found some issues. Check this job log and the artifact reports."
      fi

      if [ "$SARIF_REPORTER" = true ]; then
        mkdir ${CI_PROJECT_DIR}/${CONVERTED_OUTPUT_FOLDER}
        cp ${CI_PROJECT_DIR}/${REPORT_OUTPUT_FOLDER}/megalinter-report.sarif ${CI_PROJECT_DIR}/${CONVERTED_OUTPUT_FOLDER}
        cd ${CI_PROJECT_DIR}/${CONVERTED_OUTPUT_FOLDER}
        npx -y sarif-codeclimate@${SARIF_CODECLIMATE_VERSION} -i megalinter-report.sarif -o code-climate.json
      fi

      cd $CI_PROJECT_DIR

      TMPFILE=$(mktemp)
      git diff > "${TMPFILE}"
      git stash -u && git stash drop

      reviewdog \
        -name="megalinter-reviewdog-suggester" \
        -f=diff \
        -f.diff.strip=1 \
        -reporter="gitlab-mr-discussion" \
        -log-level="debug" \
        -tee \
        ${INPUT_REVIEWDOG_FLAGS} <"${TMPFILE}" # INPUT_REVIEWDOG_FLAGS is intentionally split to pass multiple flags

  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/${REPORT_OUTPUT_FOLDER}
      - ${CI_PROJECT_DIR}/${CONVERTED_OUTPUT_FOLDER}
    expire_in: 1 week
    reports:
      codequality: "${CI_PROJECT_DIR}/${CONVERTED_OUTPUT_FOLDER}/code-climate.json"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'
      when: always
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
    - when: never
